buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            // GTNH ForgeGradle Fork
            name = "GTNH Maven"
            url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2.13'
    }
}

plugins {
    id 'maven-publish'
}

apply plugin: 'forge'

version = "1.7.10R1.2.1"
group = "cofh"
archivesBaseName = "CoFHLib-dust"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
}

repositories {
    maven {
        name 'Overmind forge repo mirror'
        url 'https://gregtech.overminddl1.com/'
    }

    maven { url 'https://jitpack.io' }
}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

jar {
    manifest {
        attributes 'FMLAT': 'cofh_at.cfg'
    }
}

task apiJar(type: Jar, dependsOn: 'sourceMainJava') {
    from('build/sources/java') {
        include "**/api/**/*"
    }
    classifier('api')
}

task devJar(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.output
    classifier("dev")
}

artifacts {
    archives devJar
    archives apiJar
}

project.tasks.build.dependsOn devJar, apiJar


sourceSets {
    main {
        output.resourcesDir = java.outputDir
    }
}
//当需要reobf jar包时重新设置资源文件夹
gradle.taskGraph.whenReady {
    taskGraph ->
        if (taskGraph.hasTask(":reobf")) {
            clearSourcesDir
            sourceSets.main.output.resourcesDir(new File("build/resources"))
        }
}

task clearSourcesDir {
    delete(sourceSets.main.output.classesDirs)
}

publishing.publications {
    mavenJava(MavenPublication) {
        from components.java
    }
}
